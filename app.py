from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3
from openai import OpenAI
import logging
import sys

# Configure logging
logging.basicConfig(stream=sys.stdout, level=logging.INFO)

logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))

app = Flask(__name__)

CORS(app)  # Enable CORS for all routes

client = OpenAI()

# Database structure information
database_structure = '''
sqlite3 Dataset Structure:

 - company table with columns: company_logo_url, company_logo_text, company_name, relation_to_event, event_url, company_revenue, n_employees, company_phone, company_founding_year, company_address, company_industry, company_overview, homepage_url, linkedin_company_url, homepage_base_url, company_logo_url_on_event_page, company_logo_match_flag, min_employees, max_employees

 - people table with columns: first_name, middle_name, last_name, job_title, person_city, person_state, person_country, email_pattern, homepage_base_url, duration_in_current_job, duration_in_current_company, email

 - event table with columns: event_logo_url, event_name, event_start_date, event_end_date, event_venue, event_country, event_description, event_url, event_active_days, event_industry

Table Relationships:
 - The company table contains the event_url foreign key referencing the event table's event_url.
 - The people table contains the homepage_base_url foreign key referencing the company table's homepage_base_url.
'''
def get_sql_query(qtype, user_query, sql_query ):
    content=""

    if qtype == "optim":
        content = f'''
                    User Query: {user_query}

                    SQL Query: {sql_query}

                    {database_structure}

                    For above given SQL Query generated by openai recieved syntax error which was used with sqlite3 database of above mentions tables and columns. Generate only the SQL query, as the response will be directly used as a sqlite3 query.

                    Rewrite SQL query with correct syntax while taking the table name, columns and user ask in consideration. Make sure to give direct SQL query string, dont wrap it in quotes, any symbols, or special character
                    '''
    else: 
        content = f"""
                    Task: Convert the following User Query into an SQL query to fetch the relevant data from sqlite3 database. Generate only the SQL query, as the response will be directly used as a sqlite3 query.

                    User Query: {user_query}

                    {database_structure}

                    Please ensure the generated SQL query is specific to the user's query and adheres to standard SQL practices, handling any necessary data transformations or joins as required.
                    
                    Note:
                    - When looking for industry, look for data including the token instead of matching it 
                    - Consider sector and domain as synonyms of industry
                    - Make sure to give direct SQL query string, dont wrap it in quotes, any symbols, or special character""" 

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{
            "role": "system", 
            "content": content
            },],
        max_tokens=150
    )

    sql_query = response.choices[0].message.content

    return sql_query

@app.route('/query', methods=['POST', 'OPTIONS'])
def handle_query():

    headers = {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST',
            'Access-Control-Allow-Headers': 'Content-Type'
        }
    
    if request.method == 'OPTIONS':
        return jsonify({ "headers":headers })
    
    user_query = request.json['query']

    if not user_query:
        return jsonify({"error": "No query provided", "headers": headers}), 400

    conn = sqlite3.connect('bytegenie_test.db')
    cursor = conn.cursor()

    try:
        query = get_sql_query("init", user_query, "")
        cursor.execute(query)
        result = cursor.fetchall()
        conn.close()
        return jsonify({"data": {"result": result, "sql_query": query, "query": user_query}, "headers": headers})

    except sqlite3.OperationalError:
        optimized_query = get_sql_query("optim", user_query, query)
        cursor.execute(optimized_query)
        result = cursor.fetchall()
        conn.close()
        return jsonify({"data": {"result": result, "sql_query": optimized_query, "query": user_query}, "headers": headers})

    
if __name__ == '__main__':
    app.run(debug=True)


# queries that are working great:
# - I need the email addresses of people working for companies that are attending finance and banking events
# - Get all email of people working for companies with finance and banking industry in ascending order
# - Find event running for more than 2 days
# - Find me companies with industries Oil & Gas that match the events where either event start this year  
# - get company name that are attending event for more than 3 days
# - get name of people from company who attended Global Space and Technology Convention 2025 event
# - get event names in finance and banking industry
# - Find me companies that are attending Oil & Gas related events over the next 12 months
# - Find sales people for companies that are attending events in Singapore over the next 9 month
# - Find me events that companies in Pharmaceuticals sector are attending

